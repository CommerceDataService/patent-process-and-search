{
  "type": "oa",
  "appid": "14049999",
  "ifwnumber": "102590915",
  "documentcode": "CTNF",
  "documentsourceidentifier": "CTNF",
  "partyidentifier": "90573",
  "groupartunitnumber": "2144",
  "textdata": "DETAILED ACTION\n\n\n\n1. The present application, filed on or after March 16, 2013, is being examined under the first inventor to file provisions of the AIA. \n\n2. This Office Action is sent in response to Application\u2019s Communication received on 10/09/2013 for application number 14/049999. The Office hereby acknowledges receipt of the following and placed of record in file: Specification, Drawing, Abstract, Oath/Declaration, and Claims.\n\n3. Claims 1-10, 11-15 and 16-20 are presented for examination.\n\n\n\n\n\nInformation Disclosure Statement\n\n\n\n1. The information disclosure statement (IDS) submitted on 10/09/2013 was filed prior to current Office Action.  The submission is in compliance with the provisions of 37 CFR 1.97.  Accordingly, the information disclosure statement is being considered by the examiner.\n\n\n\n\n\nClaim Rejections - 35 USC \u00a7 102\n\n\n\nThe following is a quotation of the appropriate paragraphs of 35 U.S.C. 102 that form the basis for the rejections under this section made in this Office action:\n\nA person shall be entitled to a patent unless \u2013\n\n\n\n(a)(1) the claimed invention was patented, described in a printed publication, or in public use, on sale or otherwise available to the public before the effective filing date of the claimed invention.\n\n2. Claims 1, 2, 8-12, 14-17 and 19-20 are rejected under 35 U.S.C. 102(a)(1) as being anticipated by Adams. US Patent Application Publication US 20100169863 A1 (hereinafter Adams).\n\nRegarding claims 1, 11 and 16, Adams teaches Deriving dependencies and loading methods of JavaScript files and Cascading Style Sheets (CSS)  files referenced by an application source code executing at a browser on a client in a network environment according to a map file accessed from a server, and loading the JavaScript files and CSS files according to the dependencies and loading methods  (Abstract, FIGS.1-27, claims 1, 6, 11, 21-23 text, [0002-0006], [0008-0012], [0042-0048], [0053], [0056-0058], [0064], [0082-0083], [0101-0102], [0110-0117], [0120] wherein Adams incorporates loading web applications resources files into the browser, resource files such as JavaScript and CSS files as shown in FIG. 7. Adams incorporates automatically determining resource dependency, automatically identifying with an application processing device one or more dependencies between two or more modules in an application and determining one or more ordered lists of executing the modules based on the identified one or more dependencies. The application processing device determines one or more ordered lists of executing the modules based on the identified one or more dependencies. Adams incorporates instructions stored for automatically determining resource dependency comprising machine executable code which when executed by at least one processor, causes the processor to perform steps includes identifying one or more dependencies between two or more modules in an application. One or more ordered lists of executing the modules is automatically determined based on the identified one or more dependencies).\n\nRegarding claims 2, 12 and 17, Adams teaches the method of Claim 1, wherein the map file comprises an Extensible Markup Language (XML) configuration file, wherein the XML configuration file is generated by parsing each JavaScript file for the dependencies and the loading methods (FIG. 7,  [0061-0062], [0064], [0102] wherein Adams incorporates a master configuration file is that is used to define parameters of a process including which libraries that are to be considered when building the ordered lists, although the configuration file can have other purposes. In this example, a stored XML file is used to define a path to the definitions of the libraries that should be included. The client computing device obtains an XML file with the master configuration from memory, although the master configuration information can be retrieved in other manners and from other sources. The client computing device reads the retrieved XML file with the master configuration to obtain a list of the one or more libraries for the application as well as a list of root modules as shown in FIG. 7).\n\nRegarding claims 8, 14 and 19 Adams teaches the method of Claim 1, wherein deriving the dependencies and loading methods of the JavaScript files comprises:  intercepting a JavaScript call in the executing application source code (FIG.7, [0008] wherein Adams incorporates inserting a node at beginning of the code in order to process Call process Dependency on root Module) checking the JavaScript call for dependency resolution according to the map file, wherein the map file specifies a first set of dependent JavaScript files to be lazily loaded, and a second set of dependent JavaScript files to be loaded during initial application load, lazily loading the first set of dependent JavaScript file, and loading the second set of dependent JavaScript file during initial application load  (FIGS. 12-26, [0061-0102] wherein Adams incorporates a master configuration file is that is used to define parameters of a process including which libraries that are to be considered when building the ordered lists, although the configuration file can have other purposes. In this example, a stored XML file is used to define a path to the definitions of the libraries that should be included. The client computing device obtains an XML file with the master configuration from memory, although the master configuration information can be retrieved in other manners and from other sources. The client computing device sends requests that invoke calls in order to retrieve XML file with the master configuration to obtain a list of the one or more libraries for the application as well as a list of root modules as shown in FIGS 12-13. The client computing device executes this process on each module within each of the ordered lists of modules processed for the application. This process returns the ordered set of resources contained within the module. By way of example only, consider the ordered list of modules for root module M2 with the hard dependencies to resources A.js, C.js, and B.css shown in FIG. 25 and for root module M1 shown in FIG. 26 with the hard dependencies to resources A.*, B.*, A.css, B.css, C.css, 1.img, 2.img, 3.img, 4.img, A.js, B.js, and C.js shown in FIG. 26), ([0086], [0095-0096], [0132], [0141], [0148],  [0152-0153] wherein Wei also incorporates excluding or delaying the loading of certain resource which incorporates the lazy-loading. And wherein Wei incorporates a code for controlling the timing or delaying of an ad relative to other elements of the page, or in response to a user event or a page load event)\n\nRegarding claims 9, 15 and 20 Adams teaches the method of Claim 1, further comprising lazily loading substantially all dependent JavaScript files if the map file is not found ([0058-0061] wherein Adams incorporates Hard Dependency and Soft Dependency wherein both dependency for the purpose of processing modules that are controlled by the master configuration file. While the hard or fixed loading order dependency is a relationship between two modules, where the first module cannot be loaded into the browser unless the second module has been loaded first. For example, if module A has a hard dependency on module B, then module B is guaranteed to be loaded before module A, the Soft Dependency: A soft or flexible loading order dependency is a relationship between two modules where the second module must be loaded if the first module is loaded. However, with a soft dependency no constraint on the ordering of the dependent modules is imposed. For example, if module A has a soft dependency on module B, then if module A is included, module B will also be included. However unlike a hard dependency, module A can be loaded before or after module B).\n\nRegarding claim 10, Adams teaches the method of Claim 9, wherein the JavaScript files are lazily loaded according to a dependency tree, wherein the dependency tree is generated at the server by parsing substantially all JavaScript files referenced by the application source code (FIGS. 25-26, [0102-0105], wherein Adams incorporates executing the loading process on each module within each of the ordered lists of modules processed for the application. This process returns the ordered set of resources contained within the module. By way of example only, consider the ordered list of modules for root module M2 with the hard dependencies to resources A.js, C.js, and B.css shown in FIG. 25 and for root module M1 shown in FIG. 26 with the hard dependencies to resources A.*, B.*, A.css, B.css, C.css, 1.img, 2.img, 3.img, 4.img, A.js, B.js, and C.js shown in FIG. 26. The loading process shown in FIGS. 25-26 incorporates the dependency tree).\n\n\n\n\n\n\n\nClaim Rejections - 35 USC \u00a7 103\n\n\n\n\n\n\n\n8. The following is a quotation of pre-AIA 35 U.S.C. 103(a) which forms the basis for all obviousness rejections set forth in this Office action:\n\n\n\n(a) A patent may not be obtained through the invention is not identically disclosed or described as set forth in section 102 of this title, if the differences between the subject matter sought to be patented and the prior art are such that the subject matter as a whole would have been obvious at the time the invention was made to a person having ordinary skill in the art to which said subject matter pertains.  Patentability shall not be negatived by the manner in which the invention was made.\n\n\n\n\n\n12. Claims 3, 4, 13 and 18 are rejected under pre-AIA 35 U.S.C. 103(a) as being unpatentable over Adams in view of Chatterjee et al. US Patent Application Publication US 20120005382 A1 (hereinafter Chatterjee). \n\nRegarding claims 3, 13 and 18, Adams does not teach the method of Claim 1, wherein the map file comprises a JavaScript Object Notation (JSON) file, wherein the JSON file is generated by parsing each JavaScript file and CSS file for methods and class names, respectively.\n\nHowever in analogous art of Integration of JavaScript and Cascading Style Sheets (CSS), dependency management and automatic file loading, Chatterjee teaches wherein the map file comprises a JavaScript Object Notation (JSON) file, wherein the JSON file is generated by parsing each JavaScript file and CSS file for methods and class names, respectively (FIGS. 4-6, [0047-0048] wherein Chatterjee incorporates registering a map file that contains JSON data received as a string, the JSON data is used to generated JSON object in JavaScript code. In one embodiment calling `eval( )` is used to generate JSON object in JavaScript code. Once JSON object is generated, a `.notation` format is used to access its properties. Wherein the register map file is in XML format, the XML file is used to generate a JavaScript object by parsing the XML string data and assigning the data to variables through methods such as Document Object Model (DOM) APIs).\n\nIt would have been obvious to a person in the ordinary skill in the art at the time of the invention was made to combine Chatterjee with Adams by incorporating the method of wherein the map file comprises a JavaScript Object Notation (JSON) file, wherein the JSON file is generated by parsing each JavaScript file and CSS file for methods and class names, respectively of Chatterjee into the method of wherein the map file comprises an Extensible Markup Language (XML) configuration file, wherein the XML configuration file is generated by parsing each JavaScript file for the dependencies and the loading methods of Adams for the purpose of incorporating map file written as a JavaScript Object Notation (JSON) format like variable or as name-value pairs or triplets (Chatterjee: [0047]).\n\nRegarding claim 4, Adams as modified by Chatterjee teaches the method of Claim 3, further comprising reverse mapping the JSON file at the client to derive the dependencies and loading methods ([0072], [0101] wherein Adams incorporates processing resources dependency in reverse order and loading the resources in a browser).\n\n15. Claims 5-7 are rejected under pre-AIA 35 U.S.C. 103(a) as being unpatentable over Adams in view of Chatterjee and further in view of Wei et al. US Patent Application Publication US 20150046789 A1 (hereinafter Wei).\n\nRegarding claim 5, Adams as modified by Chatterjee teaches the method of Claim 4, wherein the JSON file specifies substantially all JavaScript files and CSS files to be loaded and certain other JavaScript files and CSS files to be loaded directly at initial application load, wherein any JavaScript files and CSS files excluded from loading and loading directly at initial application load are specified in a separate exclusion file located at the server (FIGS. 12-13, Claim 6 text,[0012], [0058], [0082-0085], [0117] wherein Adams incorporates an initial start for loading resources files such as JavaScript and CSS and providing an easier and more effective method and system for automatically determining resource dependency in an application and minimizing number of resources loaded into the browser in order to function correctly. Adams incorporates excluding other resources files from loading by deferring the loading of these resources. Adams is designed to facilitate deferred loading of resources in the browser to provide a load on demand environment. If a browser needs additional resources in order to perform a specific action, those resources will be downloaded during run-time as needed).\n\nAdams and Chatterjee do not teach loading resources asynchronously.\n\nHowever in analogous art of Integration of JavaScript and Cascading Style Sheets (CSS), dependency management and automatic file loading, Wei teaches wherein the JSON file specifies substantially all JavaScript files and CSS files to be loaded asynchronously and certain other JavaScript files and CSS files to be loaded directly at initial application load, wherein any JavaScript files and CSS files excluded from asynchronous loading and loading directly at initial application load are specified in a separate exclusion file located at the server (Abstract, [0028], [0042], [0044], [0086], [0090-0094], [0098]. [0117], [0152] wherein Wei incorporates an asynchronous loading code that may speed up page loads by allowing asynchronous execution and prevent a page for being held up trying to load a resource. Wei incorporates the injected code controls a time instant for loading a resource into or from a local cache, the injected code controls a time instant for loading a resource relative to a DOM, page load or user event, e.g., a click, a mouse-over, contact with a touchpad, a key entry, eye movement, scrolling action, etc. The injected code controls a time instant for loading a resource, e.g., an image or widget, when DOM is ready, or when the resource's location is in viewport), ([0086], [0095-0096], [0132], [0141], [0148],  [0152-0153] wherein Wei also incorporates excluding or delaying the loading of certain resource which incorporates the lazy-loading. And wherein Wei incorporates a code for controlling the timing or delaying of an ad relative to other elements of the page, or in response to a user event or a page load event).\n\nIt would have been obvious to a person in the ordinary skill in the art at the time of the invention was made to combine Wei with Chatterjee with Adams by incorporating the method of wherein the JSON file specifies substantially all JavaScript files and CSS files to be loaded asynchronously and certain other JavaScript files and CSS files to be loaded directly at initial application load, wherein any JavaScript files and CSS files excluded from asynchronous loading and loading directly at initial application load are specified in a separate exclusion file located at the server of Wei into the method of wherein the map file comprises an Extensible Markup Language (XML) configuration file, wherein the XML configuration file is generated by parsing each JavaScript file for the dependencies and the loading methods of Adams and Chatterjee in order to incorporate code that adds or modifies a configuration for including advertising in the modified web page. The code that detects if advertising is already provided for in the requested web page. This code may remove advertising, e.g., to improve page load time, or to exclude advertising material that is not relevant to the user. The code may modify an existing configuration, e.g., changing an aspect ratio, size, shape, position, animation (e.g., transition effects in presenting an ad or switching ads) of an ad. The code may control timing or delaying of an ad relative to other elements of the page, or in response to a user event or a page load event (Wei: [0148]).\n\nRegarding claim 6, Adams and Chatterjee do not teach the method of Claim 5, wherein substantially all JavaScript files and CSS files that are to be loaded asynchronously are lazily loaded with timestamps.\n\nHowever in analogous art of Integration of JavaScript and Cascading Style Sheets (CSS), dependency management and automatic file loading, Wei teaches wherein substantially all JavaScript files and CSS files that are to be loaded asynchronously are lazily loaded with timestamps ([0086], [0095-0096], [0132], [0141], [0148],  [0152-0153] wherein Wei also incorporates excluding or delaying the loading of certain resource which incorporates the lazy-loading. And wherein Wei incorporates a code for controlling the timing or delaying of an ad relative to other elements of the page, or in response to a user event or a page load event), (Abstract, [0028], [0042], [0044], [0086], [0090-0094], [0098]. [0117], [0152] wherein Wei incorporates an asynchronous loading code that may speed up page loads by allowing asynchronous execution and prevent a page for being held up trying to load a resource. Wei incorporates the injected code controls a time instant for loading a resource into or from a local cache, the injected code controls a time instant for loading a resource relative to a DOM, page load or user event, e.g., a click, a mouse-over, contact with a touchpad, a key entry, eye movement, scrolling action, etc. The injected code controls a time instant for loading a resource, e.g., an image or widget, when DOM is ready, or when the resource's location is in viewport).\n\nIt would have been obvious to a person in the ordinary skill in the art at the time of the invention was made to combine Wei with Chatterjee with Adams by incorporating the method of wherein substantially all JavaScript files and CSS files that are to be loaded asynchronously are lazily loaded with timestamps of Wei into the method of wherein the map file comprises an Extensible Markup Language (XML) configuration file, wherein the XML configuration file is generated by parsing each JavaScript file for the dependencies and the loading methods of Adams and Chatterjee in order to incorporate code that adds or modifies a configuration for including advertising in the modified web page. The code that detects if advertising is already provided for in the requested web page. This code may remove advertising, e.g., to improve page load time, or to exclude advertising material that is not relevant to the user. The code may modify an existing configuration, e.g., changing an aspect ratio, size, shape, position, animation (e.g., transition effects in presenting an ad or switching ads) of an ad. The code may control timing or delaying of an ad relative to other elements of the page, or in response to a user event or a page load event (Wei: [0148]).\n\nRegarding claim 7, Adams as modified by Chatterjee teaches the method of Claim 1, wherein deriving the dependencies and loading methods of the CSS files comprises: parsing the map file, wherein the executing application source code specifies onload of a page in the application, determining related class names used on the page (Abstract, FIGS.1-27, claims 1, 6, 11, 21-23 text, [0002-0006], [0008-0012], [0042-0048], [0053], [0056-0058], [0061], [0064], [0082-0083], [0101-0102], [0110-0117], [0120] wherein Adams incorporates loading web applications resources files into the browser, resource files such as JavaScript and CSS files as shown in FIG. 7. Adams incorporates automatically determining resource dependency, automatically identifying with an application processing device one or more dependencies between two or more modules in an application and determining one or more ordered lists of executing the modules based on the identified one or more dependencies. The application processing device determines one or more ordered lists of executing the modules based on the identified one or more dependencies. Adams incorporates instructions stored for automatically determining resource dependency comprising machine executable code which when executed by at least one processor, causes the processor to perform steps includes identifying one or more dependencies between two or more modules in an application. One or more ordered lists of executing the modules are automatically determined and the libraries provide a unique namespace to all modules contained within the library are also determined as shown in FIGS. 11-24 based on the identified one or more dependencies) reverse mapping the map file using the class names to determine respective CSS files (FIGS. 12-13, Claim 6 text,[0012], [0058], [0082-0085], [0117] wherein Adams incorporates an initial start for loading resources files such as JavaScript and CSS and providing an easier and more effective method and system for automatically determining resource dependency in an application and minimizing number of resources loaded into the browser in order to function correctly. Adams incorporates excluding other resources files from loading by deferring the loading of these resources. Adams is designed to facilitate deferred loading of resources in the browser to provide a load on demand environment. If a browser needs additional resources in order to perform a specific action, those resources will be downloaded during run-time as needed), ([0072], [0101] wherein Adams incorporates processing resources dependency in reverse order and loading the resources in a browser).\n\nAdams and Chatterjee do not teach loading resources asynchronously.\n\nHowever in analogous art of Integration of JavaScript and Cascading Style Sheets (CSS), dependency management and automatic file loading, Wei teaches asynchronously loading the CSS files based on the reverse mapping (Abstract, [0028], [0042], [0044], [0086], [0090-0094], [0098]. [0117], [0152] wherein Wei incorporates an asynchronous loading code that may speed up page loads by allowing asynchronous execution and prevent a page for being held up trying to load a resource. Wei incorporates the injected code controls a time instant for loading a resource into or from a local cache, the injected code controls a time instant for loading a resource relative to a DOM, page load or user event, e.g., a click, a mouse-over, contact with a touchpad, a key entry, eye movement, scrolling action, etc. The injected code controls a time instant for loading a resource, e.g., an image or widget, when DOM is ready, or when the resource's location is in viewport), ([0086], [0095-0096], [0132], [0141], [0148],  [0152-0153] wherein Wei also incorporates excluding or delaying the loading of certain resource which incorporates the lazy-loading. And wherein Wei incorporates a code for controlling the timing or delaying of an ad relative to other elements of the page, or in response to a user event or a page load event).\n\nIt would have been obvious to a person in the ordinary skill in the art at the time of the invention was made to combine Wei with Chatterjee with Adams by incorporating the method of asynchronously loading the CSS files based on the reverse mapping of Wei into the method of wherein the map file comprises an Extensible Markup Language (XML) configuration file, wherein the XML configuration file is generated by parsing each JavaScript file for the dependencies and the loading methods of Adams and Chatterjee in order to incorporate code that adds or modifies a configuration for including advertising in the modified web page. The code that detects if advertising is already provided for in the requested web page. This code may remove advertising, e.g., to improve page load time, or to exclude advertising material that is not relevant to the user. The code may modify an existing configuration, e.g., changing an aspect ratio, size, shape, position, animation (e.g., transition effects in presenting an ad or switching ads) of an ad. The code may control timing or delaying of an ad relative to other elements of the page, or in response to a user event or a page load event (Wei: [0148]).\n\n\n\n\n\nConclusion\n\n\n\n19. The prior art made of record and not relied upon is considered pertinent to applicant's disclosure.\n\nAny inquiry concerning this communication or earlier communications from the examiner should be directed to HASSAN MRABI whose telephone number is (571)272-8875.  The examiner can normally be reached on Monday-Friday, 7:30am-5pm. Alt, Friday, EST.\n\nIf attempts to reach the examiner by telephone are unsuccessful, the examiner\u2019s supervisor, Scott Baderman can be reached on 571-272-3644.  The fax phone number for the organization where this application or proceeding is assigned is 571-273-8300.\n\nInformation regarding the status of an application may be obtained from the Patent Application Information Retrieval (PAIR) system.  Status information for published applications may be obtained from either Private PAIR or Public PAIR.  Status information for unpublished applications is available through Private PAIR only.  For more information about the PAIR system, see http://pair-direct.uspto.gov. Should you have questions on access to the Private PAIR system, contact the Electronic Business Center (EBC) at 866-217-9197 (toll-free). If you would like assistance from a USPTO Customer Service Representative or access to the automated information system, call 800-786-9199 (IN USA OR CANADA) or 571-272-1000.\n\n\n\n\n\n\n\n\n\n\n\n\n\n/HM/\n\n11/23/2015\n\n\n\n/KYLE STORK/\n\nPrimary Examiner, Art Unit 2144\n\n",
  "appl_id": 14049999,
  "file_dt": 1381291200.0,
  "effective_filing_dt": 978325200.0,
  "inv_subj_matter_ty": "UTL",
  "appl_ty": "REGULAR",
  "dn_examiner_no": "90573 ",
  "dn_dw_dn_gau_cd": "2144  ",
  "dn_pto_art_class_no": "715",
  "dn_pto_art_subclass_no": "235000",
  "confirm_no": 8590,
  "dn_intppty_cust_no": 86421.0,
  "atty_dkt_no": "03919.0608 (982163-US.01)",
  "dn_nsrd_curr_loc_cd": "e    ",
  "dn_nsrd_curr_loc_dt": 978325200.0,
  "app_status_no": 61,
  "app_status_dt": 1462334400.0,
  "wipo_pub_no": NaN,
  "patent_no": "          ",
  "patent_issue_dt": 978325200.0,
  "abandon_dt": 978325200.0,
  "disposal_type": "PENDING",
  "se_in": "N",
  "pct_no": "                 ",
  "invn_ttl_tx": "FRAMEWORK FOR DEPENDENCY MANAGEMENT AND AUTOMATIC FILE LOAD IN A NETWORK ENVIRONMENT",
  "aia_in": "Y",
  "continuity_type": "   ",
  "frgn_priority_clm": "N",
  "usc_119_met": "N",
  "fig_qt": 0,
  "indp_claim_qt": 3,
  "efctv_claims_qt": 20,
  "doc_date": 1449464400.0
}